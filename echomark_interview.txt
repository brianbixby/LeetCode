plan:
  - know myself
    - highlight experiences & tech

  - know the person
    - follows BBC News
    - pro-peace and Ukraine
    - bible
  
  - know the company - echomark
    - security and privacy products to enable the seamless flow of private information
    - looks like they will be streaming a bunch of data, large amounts of data

  - know the role
    - agile
    - high polish, pixel perfect, animated, accessible
    - server side and client side
    - design APIs -  scalable APIs, OPTIMIZE PERFORMANCE
    - express APIs

    Next.js - framework w/ serverside rendering and serving static pages for react 

    Graphql- more efficient, no more under serving or overserving data, can get exactly what you want and stitch together schemas
    Apollo Server - GraphQL Server, Apollo Server is a community-maintained open-source GraphQL server. It works with many Node.js HTTP server frameworks, or can run on its own with a built-in Express server
    Tailwind - css framework
    document workflows -  how documents are shared within company
    prisma - ORM that plugs into anything east, typesafe and autocompletion
      - https://github.com/prisma/prisma-examples/tree/latest/typescript/graphql-nextjs
    lerna- publishes packages in a mono-repo and manages dependencies
            - splits large codebase into independently deployable code base
    Front-end:
      Next.js, React, tailwind 
      Apollo Client integration? (graphql client) 
        (https://www.apollographql.com/blog/apollo-client/next-js/next-js-getting-started/)
    Back-end:
      Prisma Client (https://github.com/prisma/prisma-examples) -
      Apollo Server (Amazon Lambda integration? or Express?)?
      Graphql

Query Optimization:
  1. proper indexing - should be made on keys that occur in WHERE clauses and JOINS
  2. SELECT columns not *
  3. Don't loop your queries, you're just running the same query more times instead do a bulk
  4. Does your query exist? Use EXIST or EXIT not count because count will keep iterating, EXIST is better than IN
  5. Correlated subqueries run for each record returned
  6. don't over use wild cards
  7. Don't modify the index in your query for example if the created date is indexed then you should check for year and month its better to check for range
  8. LIMIT result #
  9. use temp table to bulk insert to load data, remove indexes from this temp table, drop indexes on main table, merge tables and recreate indexes
  10.use WHERE instead of HAVING, HAVING selects all rows then filters
  11. INNER JOIN is faster than WHERE

SQL QUERIES - JOINS
  SELECT A.col1, A.col2, B.col2
  FROM A
  INNER JOIN B ON A.col2 = B.col2;

  LEFT JOIN, RIGHT JOIN, FULL JOIN (UNION)

REACT 
    npx create-react-app@latest practiceProject
    npm i --save create-react-app dotenv react-redux react-router react-router-dom redux sass superagent validator

    export const renderIf = (test, component) => (test ? component : undefined);
    export const classToggler = options => Object.keys(options).filter(key => !!options[key]).join(' ');

    npx create-react-app@latest my-app --template file:/Users/brianbixby/Desktop/code/after-school/LeetCode/practice/cra-template-boilerplate

    npx create-react-app my-app --template cra-template-bixby

controlled and uncontrolled components

flatten array use a stack

NEXT 

API ROUTES - (brew services start mysql)
    npm init -y
    npm i --save connect-session-sequelize cors dotenv express mysql2 sequelize
    npm run start
    mysql -u root -p
        SOURCE ./db/schema.sql;
    npm run seed


  - know the tech
    - react
    - next.js
    - sql joins
    - API Routes

npx - node package runner, can execute any node package 